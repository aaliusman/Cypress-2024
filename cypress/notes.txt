cypress api webpage (need any help with Cypress command go to below link)
https://docs.cypress.io/api/table-of-contents


Node js - Run time environment to run any javascript

How to add file path globally to your system

/user/local/bin
echo $PATH     

Open terminal 
open -e .bash_profile
export PATH=$PATH:/usr/local/git/bin:/usr/local/bin

Save it
Run source ~/.bash_profile

Exit and open terminal

For windows
C drive, program file, nojdejs get the file path
Go to system environment properties
Environment variables
New button
Variable name - NODE_HOME
Valuable value = file path

Package.json - it is a json file that exist at the root of your project, manage your project dependencies. 


"cypress": "^13.6.6"

npm - node package manager - where you find all dependencies 


assertions reference page: https://docs.cypress.io/guides/references/assertions

Terminal:  mkdir CypressAutomation
Cd CpyressAutomation
//to install package.json
npm -i init
Hit enter
Enter
Enter
hit enter multiple times
By default it will create package.json file


Go to terminal
npm install cypress - -save-dev   it will install cypress in package.json

create inetgration folder, then exmaples folder then create a file test1.js

What is cypress test runner
node_modules/.bin/cypress open     it will open cypress dashboard  


Select e2e project
Click continue
Select browser   it will open cypress runner


Go to cypress.config.js and give path to your project where your specs are present

specPattern: ‘cypress/integration/examples/*.js’

https://docs.cypress.io/guides/end-to-end-testing/writing-your-first-end-to-end-test

Standard testing framework Jasmine or Mocha, need to choose one we will one Mocha
Testing framework like Junit and TestNG

Navigating to URL https://rahulshettyacademy.com/seleniumPractise/#/


Through command line, cypress runs in headless mode in electron 
node_modules/.bin/cypress run


To run specific spec
node_modules/.bin/cypress run —spec “use  your own fiel file path”
node_modules/.bin/cypress run --headed --spec 'cypress/integration/examples/test2.js'

Visible mode —headed mode
node_modules/.bin/cypress run —headed 

If you want to execute specific browser
node_modules/.bin/cypress run —headed chrome
node_modules/.bin/cypress run —headed firefox

npx cypress run --spec cypress/integration/examples/test6Framework.js --headed --browser chrome --env url="https://rahulshettyacademy.com/" 


To craete a selector, you need Tagname, attriubte name and attribute value


Cypress only support css selectors/locators
Id = #idname
Class = .classname .search-keyword
	tag.classname  = input.search-keyword
Tag name attribute and its value
input[type='search']
form input
if you want to use specicic text of attribute value
a[href*="about"]
if you want to locate specific tag by using nth-child
tr td:nth-child(2)
.next() to locate siblings of elments

asynchronus = doesn't go in sequence or line by line
synchronus = it goes line by line, in sequence

Cypress is asynchronus in nature and there is no guarantee in sequence of execution,
but cypress takes care of it 99% of time


Ever asynchronus step written a Promise, promise comes with rejection, resolved
planning

.then()

Alias - if you want to avoid using same elment again and again, we can use
alias like cy.get('.products').as('prodLocator');

static drodown also known as select
dynamic dropdown keeps changing according to the value you engter


An implicit wait is a setting applied globally to the WebDriver instance. 
It tells the WebDriver to wait for a certain amount of time before throwing 
a "No Such Element" exception. This wait is applied to all elements in the script.

On the other hand, an explicit wait is used for a particular instance only. 
It is more specific and allows you to set different wait times for different elements 
in your script. Explicit waits are more flexible as they allow you to wait for certain
 conditions (such as element visibility or clickability) before proceeding with the next 
 steps in your script.


 Assertion - you have expectecd value and actual value
 Expected value: comes from user story/acceptance criteria/ product owner
 Actual value: comes from actual application/website

 DOM - Document object model of html page, where you find all the elements of the page

 The invoke command in Cypress is used to invoke a function on the subject
  yielded from the previous command. It allows you to call a function on a DOM 
  element or a custom command that returns a function. 

  An iframe, short for inline frame, is an HTML element that allows you to
  embed another document within the current HTML document.


  Cypress framework
  Setting up test hooks
  Data Driven testing with fixtures
  Building Custom cypress commands
  Parameterize test with Mulitple Data steps
  Understand the test debugging
  Build Page object Desing pattern for objects
  Configuration changes in Cypress.json
  Screenshots and video recording for Testing
  Exploring cypress dashboard
  Undersatnd the environmental vairalbes of cypress
  Generate Excellent reports for Test execution results
  Integrate Cypress tests with Jenkins CI

  before(() => {
  // root-level hook
  // runs once before all tests
})

beforeEach(() => {
  // root-level hook
  // runs before every test block
})

afterEach(() => {
  // runs after each test block
})

after(() => {
  // runs once all tests are done
})


domain in a URL refers to the unique name that identifies a website,
 such as "google.com" or "example.org". An endpoint, on the other hand, 
 is a specific URL within a web service
  domain - google.com
  endpoint - google.com/search


  API Notes
  There are four main type requst type: GET, POST, PUT, DELETE
  APIs, the GET method is often used to retrieve information from a specified resource.
   For example, when you enter a website's URL into your web browser, 
   your browser makes a GET request to the server to retrieve the web page.

   APIs, the PUT method is often used to update the specified resource with the 
   new data provided in the request.

   APIs, the POST method is often used when you want to add a new record to a database,
   submit a form, or send data to the server for processing. 

   APIs, the DELETE method is often used to remove a resource from the server

  #2) 200 Series
The client accepts the Request, being processed successfully at the server.
200 – OK
201 – Created
202 – Accepted
203 – Non-Authoritative Information
204 – No Content
205 – Reset Content

#3) 300 Series
Most of the codes related to this series are for URL Redirection.
300 – Multiple Choices
301 – Moved Permanently
302 – Found
303 – Check Other
304 – Not Modified

 #4) 400 Series
These are specific to client-side error.
400 – Bad Request
401 – Unauthorised
402 – Payment Required
403 – Forbidden
404 – Not Found